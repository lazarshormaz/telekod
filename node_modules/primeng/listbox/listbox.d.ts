import { ElementRef, EventEmitter, AfterContentInit, QueryList, TemplateRef, ChangeDetectorRef } from '@angular/core';
import { SelectItem } from 'primeng/api';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'primeng/api';
export declare const LISTBOX_VALUE_ACCESSOR: any;
export declare class Listbox implements AfterContentInit, ControlValueAccessor {
    el: ElementRef;
    cd: ChangeDetectorRef;
    multiple: boolean;
    style: any;
    styleClass: string;
    listStyle: any;
    readonly: boolean;
    disabled: boolean;
    checkbox: boolean;
    filter: boolean;
    filterMode: string;
    filterLocale: string;
    metaKeySelection: boolean;
    dataKey: string;
    showToggleAll: boolean;
    optionLabel: string;
    ariaFilterLabel: string;
    filterPlaceHolder: string;
    onChange: EventEmitter<any>;
    onClick: EventEmitter<any>;
    onDblClick: EventEmitter<any>;
    headerCheckboxViewChild: ElementRef;
    headerFacet: any;
    footerFacet: any;
    templates: QueryList<any>;
    itemTemplate: TemplateRef<any>;
    _filterValue: string;
    filtered: boolean;
    value: any;
    onModelChange: Function;
    onModelTouched: Function;
    optionTouched: boolean;
    focus: boolean;
    _options: any[];
    headerCheckboxFocus: boolean;
    disabledSelectedOptions: SelectItem[];
    constructor(el: ElementRef, cd: ChangeDetectorRef);
    options: any[];
    filterValue: string;
    ngAfterContentInit(): void;
    writeValue(value: any): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(val: boolean): void;
    onOptionClick(event: any, option: any): void;
    onOptionTouchEnd(event: any, option: any): void;
    onOptionDoubleClick(event: Event, option: SelectItem): any;
    onOptionClickSingle(event: any, option: any): void;
    onOptionClickMultiple(event: any, option: any): void;
    onOptionClickCheckbox(event: any, option: any): void;
    removeOption(option: any): void;
    isSelected(option: SelectItem): boolean;
    readonly allChecked: boolean;
    getEnabledOptionCount(): number;
    allFilteredSelected(): boolean;
    onFilter(event: any): void;
    toggleAll(event: any): void;
    isItemVisible(option: SelectItem): boolean;
    onInputFocus(event: any): void;
    onInputBlur(event: any): void;
    onOptionKeyDown(event: KeyboardEvent, option: any): void;
    findNextItem(item: any): any;
    findPrevItem(item: any): any;
    getFilteredOptions(): any[];
    onHeaderCheckboxFocus(): void;
    onHeaderCheckboxBlur(): void;
    setDisabledSelectedOptions(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Listbox, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Listbox, "p-listbox", never, { "checkbox": "checkbox"; "filter": "filter"; "filterMode": "filterMode"; "metaKeySelection": "metaKeySelection"; "showToggleAll": "showToggleAll"; "options": "options"; "filterValue": "filterValue"; "disabled": "disabled"; "multiple": "multiple"; "style": "style"; "styleClass": "styleClass"; "listStyle": "listStyle"; "readonly": "readonly"; "filterLocale": "filterLocale"; "dataKey": "dataKey"; "optionLabel": "optionLabel"; "ariaFilterLabel": "ariaFilterLabel"; "filterPlaceHolder": "filterPlaceHolder"; }, { "onChange": "onChange"; "onClick": "onClick"; "onDblClick": "onDblClick"; }, ["headerFacet", "footerFacet", "templates"], ["p-header", "p-footer"]>;
}
export declare class ListboxModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<ListboxModule, [typeof Listbox], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.SharedModule], [typeof Listbox, typeof ɵngcc2.SharedModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<ListboxModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdGJveC5kLnRzIiwic291cmNlcyI6WyJsaXN0Ym94LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOzs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgQWZ0ZXJDb250ZW50SW5pdCwgUXVlcnlMaXN0LCBUZW1wbGF0ZVJlZiwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNlbGVjdEl0ZW0gfSBmcm9tICdwcmltZW5nL2FwaSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IExJU1RCT1hfVkFMVUVfQUNDRVNTT1I6IGFueTtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIExpc3Rib3ggaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gICAgZWw6IEVsZW1lbnRSZWY7XG4gICAgY2Q6IENoYW5nZURldGVjdG9yUmVmO1xuICAgIG11bHRpcGxlOiBib29sZWFuO1xuICAgIHN0eWxlOiBhbnk7XG4gICAgc3R5bGVDbGFzczogc3RyaW5nO1xuICAgIGxpc3RTdHlsZTogYW55O1xuICAgIHJlYWRvbmx5OiBib29sZWFuO1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIGNoZWNrYm94OiBib29sZWFuO1xuICAgIGZpbHRlcjogYm9vbGVhbjtcbiAgICBmaWx0ZXJNb2RlOiBzdHJpbmc7XG4gICAgZmlsdGVyTG9jYWxlOiBzdHJpbmc7XG4gICAgbWV0YUtleVNlbGVjdGlvbjogYm9vbGVhbjtcbiAgICBkYXRhS2V5OiBzdHJpbmc7XG4gICAgc2hvd1RvZ2dsZUFsbDogYm9vbGVhbjtcbiAgICBvcHRpb25MYWJlbDogc3RyaW5nO1xuICAgIGFyaWFGaWx0ZXJMYWJlbDogc3RyaW5nO1xuICAgIGZpbHRlclBsYWNlSG9sZGVyOiBzdHJpbmc7XG4gICAgb25DaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uQ2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uRGJsQ2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGhlYWRlckNoZWNrYm94Vmlld0NoaWxkOiBFbGVtZW50UmVmO1xuICAgIGhlYWRlckZhY2V0OiBhbnk7XG4gICAgZm9vdGVyRmFjZXQ6IGFueTtcbiAgICB0ZW1wbGF0ZXM6IFF1ZXJ5TGlzdDxhbnk+O1xuICAgIGl0ZW1UZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBfZmlsdGVyVmFsdWU6IHN0cmluZztcbiAgICBmaWx0ZXJlZDogYm9vbGVhbjtcbiAgICB2YWx1ZTogYW55O1xuICAgIG9uTW9kZWxDaGFuZ2U6IEZ1bmN0aW9uO1xuICAgIG9uTW9kZWxUb3VjaGVkOiBGdW5jdGlvbjtcbiAgICBvcHRpb25Ub3VjaGVkOiBib29sZWFuO1xuICAgIGZvY3VzOiBib29sZWFuO1xuICAgIF9vcHRpb25zOiBhbnlbXTtcbiAgICBoZWFkZXJDaGVja2JveEZvY3VzOiBib29sZWFuO1xuICAgIGRpc2FibGVkU2VsZWN0ZWRPcHRpb25zOiBTZWxlY3RJdGVtW107XG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsIGNkOiBDaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgb3B0aW9uczogYW55W107XG4gICAgZmlsdGVyVmFsdWU6IHN0cmluZztcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IEZ1bmN0aW9uKTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogRnVuY3Rpb24pOiB2b2lkO1xuICAgIHNldERpc2FibGVkU3RhdGUodmFsOiBib29sZWFuKTogdm9pZDtcbiAgICBvbk9wdGlvbkNsaWNrKGV2ZW50OiBhbnksIG9wdGlvbjogYW55KTogdm9pZDtcbiAgICBvbk9wdGlvblRvdWNoRW5kKGV2ZW50OiBhbnksIG9wdGlvbjogYW55KTogdm9pZDtcbiAgICBvbk9wdGlvbkRvdWJsZUNsaWNrKGV2ZW50OiBFdmVudCwgb3B0aW9uOiBTZWxlY3RJdGVtKTogYW55O1xuICAgIG9uT3B0aW9uQ2xpY2tTaW5nbGUoZXZlbnQ6IGFueSwgb3B0aW9uOiBhbnkpOiB2b2lkO1xuICAgIG9uT3B0aW9uQ2xpY2tNdWx0aXBsZShldmVudDogYW55LCBvcHRpb246IGFueSk6IHZvaWQ7XG4gICAgb25PcHRpb25DbGlja0NoZWNrYm94KGV2ZW50OiBhbnksIG9wdGlvbjogYW55KTogdm9pZDtcbiAgICByZW1vdmVPcHRpb24ob3B0aW9uOiBhbnkpOiB2b2lkO1xuICAgIGlzU2VsZWN0ZWQob3B0aW9uOiBTZWxlY3RJdGVtKTogYm9vbGVhbjtcbiAgICByZWFkb25seSBhbGxDaGVja2VkOiBib29sZWFuO1xuICAgIGdldEVuYWJsZWRPcHRpb25Db3VudCgpOiBudW1iZXI7XG4gICAgYWxsRmlsdGVyZWRTZWxlY3RlZCgpOiBib29sZWFuO1xuICAgIG9uRmlsdGVyKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIHRvZ2dsZUFsbChldmVudDogYW55KTogdm9pZDtcbiAgICBpc0l0ZW1WaXNpYmxlKG9wdGlvbjogU2VsZWN0SXRlbSk6IGJvb2xlYW47XG4gICAgb25JbnB1dEZvY3VzKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIG9uSW5wdXRCbHVyKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIG9uT3B0aW9uS2V5RG93bihldmVudDogS2V5Ym9hcmRFdmVudCwgb3B0aW9uOiBhbnkpOiB2b2lkO1xuICAgIGZpbmROZXh0SXRlbShpdGVtOiBhbnkpOiBhbnk7XG4gICAgZmluZFByZXZJdGVtKGl0ZW06IGFueSk6IGFueTtcbiAgICBnZXRGaWx0ZXJlZE9wdGlvbnMoKTogYW55W107XG4gICAgb25IZWFkZXJDaGVja2JveEZvY3VzKCk6IHZvaWQ7XG4gICAgb25IZWFkZXJDaGVja2JveEJsdXIoKTogdm9pZDtcbiAgICBzZXREaXNhYmxlZFNlbGVjdGVkT3B0aW9ucygpOiB2b2lkO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTGlzdGJveE1vZHVsZSB7XG59XG4iXX0=